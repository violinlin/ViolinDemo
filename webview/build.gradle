apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion



    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

project.afterEvaluate {
    println("processManifest: " + getVariantName())
    String variantName = getVariantName()
    project.tasks.getByName("process${variantName}Manifest").doLast {
        println("task name " + project.name)
        String maniFestPath = getProjectDir().getAbsolutePath() + "/build/intermediates/library_manifest/${variantName.toLowerCase()}/AndroidManifest.xml"
        if (file(maniFestPath).exists()) {
            def xmlParser = new XmlParser()
            def manifestXml = xmlParser.parse(maniFestPath)
            def iterator = manifestXml.children().iterator()

            println("------------- start remove permission -------------")
            while (iterator.hasNext()) {
                Node node = iterator.next()
                if ("uses-permission".equalsIgnoreCase(node.name())) {
                    node.attributes().values().each { name ->
                        if (getRemovePermissionList().contains(name)) {
                            iterator.remove()
                            manifestXml.remove(node)
                            println("\t" + name)
                        }
                    }
                }
            }
            new File(maniFestPath).withWriter("UTF8") {
                it.write(groovy.xml.XmlUtil.serialize(manifestXml))
            }

            println("------------- end  remove permission -------------")
        }
    }
}

List<String> getRemovePermissionList() {
    List<String> removeList = new ArrayList<>()
    removeList.add("android.permission.READ_PHONE_STATE")
    removeList.add("android.permission.READ_EXTERNAL_STORAGE")
    removeList.add("android.permission.WRITE_EXTERNAL_STORAGE")
    return removeList
}

def getVariantName() {
    def name = gradle.startParameter.taskNames.toString()
    if (name.contains("Debug")) {
        return "Debug"
    }
    return "Release"
}



